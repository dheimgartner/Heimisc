drop_na()
## code to prepare `bfs_crosswalks` dataset goes here
## https://www.bfs.admin.ch/asset/de/do-t-09.02-gwr-37
library(tidyverse)
rm(list = ls())
path <- "data-raw/bfs_crosswalks.xlsx"
sheet <- "PLZ4"
bfs_crosswalks <-
path %>%
readxl::read_excel(sheet = sheet, col_names = TRUE) %>%
drop_na()
bfs_crosswalks <-
bfs_crosswalks %>%
mutate(across(!all_of(c("PLZ4", "%_IN_GDE", "GDENR")), factor))
max_perc <-
bfs_crosswalks %>%
group_by(PLZ4) %>%
summarise(max_perc = max(`%_IN_GDE`, na.rm = TRUE)) %>%
ungroup()
bfs_crosswalks <-
max_perc %>%
left_join(bfs_crosswalks, by = c("PLZ4", "max_perc" = "%_IN_GDE")) %>%
select(PLZ4, everything(), -max_perc) %>%
group_by(PLZ4) %>%
slice(1) %>%
ungroup()
usethis::use_data(bfs_crosswalks, overwrite = TRUE)
## code to prepare `gemeindetypologie` dataset goes here
## https://www.agvchapp.bfs.admin.ch/de/typologies/query
library(tidyverse)
rm(list = ls())
path <- "data-raw/gemeindetypologie.xlsx"
sheet1 <- "Daten"
sheet2 <- "CH1+CL_GDET9+2012.1"
gemeindetypologie <-
path %>%
readxl::read_excel(sheet = sheet1, skip = 1) %>%
drop_na() %>%
select(-c("Städtische / Ländliche Gebiete", "Gemeindetypologie 2012 (25 Typen)")) %>%
rename(Code = "Gemeindetypologie 2012 (9 Typen)")
labels <-
path %>%
readxl::read_excel(sheet = sheet2, skip = 1)
gemeindetypologie <-
gemeindetypologie %>%
left_join(labels)
## add plz
devtools::load_all()
gemeindetypologie <-
gemeindetypologie %>%
mutate(across(!all_of(c("Gemeindename", "BFS Gde-nummer")), factor))
gemeindetypologie <-
gemeindetypologie %>%
left_join(Heimisc::bfs_crosswalks, by = c("BFS Gde-nummer" = "GDENR")) %>%
select(gemeindename = GDENAMK, kanton = Kanton, plz = PLZ4, code = Code, gemeindetypologie = Label)
usethis::use_data(gemeindetypologie, overwrite = TRUE)
## code to prepare `urbanisierungsgrad` dataset goes here
## https://www.agvchapp.bfs.admin.ch/de/typologies/query
library(tidyverse)
rm(list = ls())
path <- "data-raw/urbanisierungsgrad.xlsx"
sheet1 <- "Daten"
sheet2 <- "CH1+CL_DEGURB+2017.1"
urbanisierungsgrad <-
path %>%
readxl::read_excel(sheet = sheet1, skip = 1) %>%
drop_na() %>%
rename(Code = "Urbanisierungsgrad 2011 (DEGURBA) - eurostat")
labels <-
path %>%
readxl::read_excel(sheet = sheet2, skip = 1)
urbanisierungsgrad <-
urbanisierungsgrad %>%
left_join(labels)
## add plz
urbanisierungsgrad <-
urbanisierungsgrad %>%
mutate(across(!all_of(c("Gemeindename", "BFS Gde-nummer")), factor))
devtools::load_all()
urbanisierungsgrad <-
urbanisierungsgrad %>%
left_join(Heimisc::bfs_crosswalks, by = c("BFS Gde-nummer" = "GDENR")) %>%
select(gemeindename = GDENAMK, kanton = Kanton, plz = PLZ4, code = Code, urbanisierungsgrad = Label)
usethis::use_data(urbanisierungsgrad, overwrite = TRUE)
devtools::load_all()
devtools::document()
usethis::use_version()
usethis::use_version()
Heimisc::reinstall()
Heimisc::urbanisierungsgrad
Heimisc::gemeindetypologie
usethis::use_data_raw("labels")
# Gemeindetypologie & Urbanisierungsgrad
path <- "./data-raw/typo_urbalabels.xlsx"
sheets <- readxl::excel_sheets(path)
labels_ <-
map(sheets, function(s) {
lab <- readxl::read_xlsx(path, sheet = s)
lab <-
lab %>%
select(from, to, filter) %>%
arrange(filter, to)
})
library(tidyverse)
library(readxl)
# Gemeindetypologie & Urbanisierungsgrad
path <- "./data-raw/typo_urbalabels.xlsx"
sheets <- readxl::excel_sheets(path)
labels_ <-
map(sheets, function(s) {
lab <- readxl::read_xlsx(path, sheet = s)
lab <-
lab %>%
select(from, to, filter) %>%
arrange(filter, to)
})
# Gemeindetypologie & Urbanisierungsgrad
path <- "./data-raw/typo-urba/labels.xlsx"
sheets <- readxl::excel_sheets(path)
labels_ <-
map(sheets, function(s) {
lab <- readxl::read_xlsx(path, sheet = s)
lab <-
lab %>%
select(from, to, filter) %>%
arrange(filter, to)
})
names(labels) <- sheets
names(labels_) <- sheets
labels_
labels <- list()
## code to prepare `labels` dataset goes here
library(tidyverse)
library(readxl)
labels <- list()
# Gemeindetypologie & Urbanisierungsgrad
path <- "./data-raw/typo_urba/labels.xlsx"
sheets <- readxl::excel_sheets(path)
labels_ <-
map(sheets, function(s) {
lab <- readxl::read_xlsx(path, sheet = s)
lab <-
lab %>%
select(from, to, filter) %>%
arrange(filter, to)
})
names(labels_) <- sheets
labels$typo_urba <- labels_
usethis::use_data(labels, overwrite = TRUE)
devtools::load_all()
usethis::use_version
usethis::use_version()
Heimisc::reinstall()
devtools::load_all()
devtools::document()
devtools::load_all()
Heimisc::labels
Heimisc::labels$typo_urba
library(Heimisc)
detach("package:Heimisc", unload = TRUE)
remove.packages("Heimisc", lib="~/R/x86_64-pc-linux-gnu-library/4.3")
devtools::install_github("dheimgartner/Heimisc")
Heimisc::labels
library(snndata)
remove.packages("snndata")
devtools::load_all()
get_cran()
install("snndata")
getOption("repos")
usethis::edit_r_profile()
remove.packages("Heimisc")
install.packages("Heimisc", repos = "file://home/daniehei/_CRAN")
install.packages("Heimisc", repos = "file://home/daniehei/_CRAN")
install.packages("Heimisc", repos = "file://home/daniehei/_CRAN")
install.packages("Heimisc", repos = "file://home/daniehei/_CRAN")
install.packages("Heimisc", repos = "file://home/daniehei/_CRAN")
install.packages("Heimisc", repos = "file://home/daniehei/_CRAN")
install.packages("Heimisc", repos = "file://home/daniehei/_CRAN")
Heimisc::uninstall("addresses")
getOption("repos")
install.packages("addresses")
Heimisc::uninstall("addresses")
devtools::load_all()
library(Heimisc)
library(Heimisc::plot_colors)
devtools::document()
devtools::document()
library(Heimisc)
Heimisc::my_theme
usethis::use_data_raw("swiss_shapefiles")
library(bfsMaps)
bfsMaps::GetMap()
?bfsMaps::GetMap
getOption("bfsMaps.base")
getOption("bfsMaps.base",
default = file.path(find.package("bfsMaps"), "extdata"))
GetMap("kant.map")
mymap <- GetMap("metr.map")$geometry
options(bfsMaps.base = "~/MapData/2024_GEOM_TK")
mymap <- GetMap("metr.map")$geometry
mymap
class(mymap)
mymap <- GetMap("metr.map")
mymap
plot(mymap)
?GetMap
maps <- system.file("extdata/maps.csv", package = "bfsMaps")
maps
path_maps <- system.file("extdata/maps.csv", package = "bfsMaps")
maps <- readr::read_csv(path_maps)
maps
maps <- readr::read_csv2(path_maps)
maps
library(tidyverse)
maps
bfsMaps::GetMap(9)
plot(bfsMaps::GetMap(9))
maps
maps %>% drop_na()
plot(bfsMaps::GetMap("fluss1.map"))
plot(bfsMaps::GetMap("fluss1.map")$geometry)
plot(bfsMaps::GetMap("fluss2.map")$geometry)
plot(bfsMaps::GetMap("fluss3.map")$geometry)
plot(bfsMaps::GetMap("fluss4.map")$geometry)
plot(bfsMaps::GetMap("fluss5.map")$geometry)
plot(bfsMaps::GetMap("see1.map")$geometry)
plot(bfsMaps::GetMap("see2.map")$geometry)
plot(bfsMaps::GetMap("see1.map")$geometry)
plot(bfsMaps::GetMap("see2.map")$geometry)
see1 <- bfsMaps::GetMap("see1.map")$geometry
see2 <- bfsMaps::GetMap("see2.map")$geometry
ggplot() +
geom_sf(data = see1, col = "blue") +
geom_sf(data = see2, col = "green")
see1
avbl <-
maps %>%
drop_na() %>%
pull(name_x)
avbl
all_maps <-
avbl %>%
map(function(x) get_map(x))
get_map <- function(name = NULL) {
bfsMaps::GetMap(name)
}
avbl <-
maps %>%
drop_na() %>%
pull(name_x)
all_maps <-
avbl %>%
map(function(x) get_map(x))
avbl
see1 <- bfsMaps::GetMap("bezkvf.map")$geometry
see1 <- bfsMaps::GetMap("see1.map")$geometry
see2 <- bfsMaps::GetMap("see2.map")$geometry
ggplot() +
geom_sf(data = see1, col = "blue") +
geom_sf(data = see2, col = "green")
ggplot() +
geom_sf(data = see1, fill = "lightblue") +
geom_sf(data = see2, fill = "blue")
ggplot() +
geom_sf(data = see1, fill = "lightblue") +
geom_sf(data = see2, fill = "red")
ggplot() +
geom_sf(data = see1, fill = "lightblue") +
geom_sf(data = see2, fill = "darkblue")
ggplot() +
geom_sf(data = see1, fill = "lightblue") +
geom_sf(data = see2, fill = "darkblue") +
theme_void()
ggplot() +
geom_sf(data = see1, fill = "lightblue") +
geom_sf(data = see2, fill = "lightblue") +
theme_void()
maps
avbl
options(bfsMaps.base = "~/MapData/2024_GEOM_TK")
bfsMaps::DownloadBfSMaps()
bfsMaps::DownloadBfSMaps()
?bfsMaps::DownloadBfSMaps
options(bfsMaps.base = "~/MapData/2022_GEOM_TK")
path_maps <- system.file("extdata/maps.csv", package = "bfsMaps")
maps <- readr::read_csv2(path_maps)
maps
get_map <- function(name = NULL) {
bfsMaps::GetMap(name)
}
avbl <-
maps %>%
drop_na() %>%
pull(name_x)
all_maps <-
avbl %>%
map(function(x) get_map(x))
?tryCatch
all_maps <-
avbl %>%
map(function(x) {
tryCatch(get_map(x), error = function(e) NA)
})
all_maps
names(all_maps) <- avbl
avbl
as.data.frame(all_maps)
all_maps
all_maps <- all_maps[[!is.na(all_maps)]]
is.na(all_maps)
all_maps <- all_maps[[!is.na(all_maps)]]
all_maps <- all_maps[!is.na(all_maps)]
all_maps
?DownloadBfSMaps
devtools::load_all()
debugonce(Heimisc::update_cran)
Heimisc::update_cran()
quit()
devtools::load_all()
Heimisc::update_cran()
l
devtools::load_all()
Heimisc::update_cran()
contrib
devtools::load_all()
Heimisc::update_cran()
devtools::load_all()
Heimisc::update_cran()
quit()
devtools::load_all()
write_cran()
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
usethis::use_version()
devtools::install_github("dheimgartner/Heimisc")
library(Heimisc)
?Heimisc::write_cran
library(Heimisc)
?Heimisc::write_cran
Heimisc::install
Heimisc::install("snnverse")
devtools::load_all()
devtools::document()
?Heimisc
devtools::load_all()
?Heimisc::`%notin%`
Heimisc::reinstall()
remove.packages("Heimisc")
devtools::install_github("dheimgartner/Heimisc")
devtools::install_github("dheimgartner/Heimisc")
library(Heimisc)
devtools::install_github("dheimgartner/Heimisc")
help(package = "Heimisc")
devtools::load_all()
library(tidyverse)
colors <- RColorBrewer::brewer.pal(n = 11, name = "BrBG")
iris %>%
ggplot(aes(x = Sepal.Length, y = Sepal.Width, shape = Species, col = Species)) +
geom_point(size = 2) +
labs(title = "The famous iris data",
subtitle = "Have you ever seen it?") +
scale_color_manual(values = colors[c(8, 3, 10)]) +
my_theme() +
add_grid()
iris %>%
ggplot(aes(x = Sepal.Length, y = Sepal.Width, shape = Species, col = Species)) +
geom_point(size = 2) +
labs(title = "The famous iris data",
subtitle = "Have you ever seen it?") +
scale_color_manual(values = colors[c(8, 3, 10)]) +
my_theme() +
add_grid() +
expand_limits(x = 0, y = 0)
iris %>%
ggplot(aes(x = Sepal.Length, y = Sepal.Width, shape = Species, col = Species)) +
geom_point(size = 2) +
labs(title = "The famous iris data",
subtitle = "Have you ever seen it?") +
scale_color_manual(values = colors[c(8, 3, 10)]) +
my_theme() +
add_grid()
iris %>%
ggplot(aes(x = Sepal.Length, y = Sepal.Width, shape = Species, col = Species)) +
geom_point(size = 2) +
labs(title = "The famous iris data",
subtitle = "Have you ever seen it?") +
scale_color_manual(values = colors[c(8, 3, 10)]) +
my_theme() +
add_grid() +
expand_limits(x = c(5, 7))
iris %>%
ggplot(aes(x = Sepal.Length, y = Sepal.Width, shape = Species, col = Species)) +
geom_point(size = 2) +
labs(title = "The famous iris data",
subtitle = "Have you ever seen it?") +
scale_color_manual(values = colors[c(8, 3, 10)]) +
my_theme() +
add_grid() +
expand_limits(x = c(5, 7))
legend_inside <- function() {
legend_inside <- function() {
legend_inside <- function() {
theme(legend.position = "inside",
legend.position.inside = c(1, 1),
legend.justification = c(1.05, 1.1),
legend.title = element_text(size = rel(0.7)),
legend.text = element_text(size = rel(0.6)),
legend.key.size = unit(0.3, "cm"))
}
p <-
iris %>%
ggplot(aes(x = Sepal.Length, y = Sepal.Width, shape = Species, col = Species)) +
geom_point(size = 2) +
labs(title = "The famous iris data",
subtitle = "Have you ever seen it?") +
scale_color_manual(values = colors[c(8, 3, 10)]) +
my_theme() +
add_grid() +
expand_limits(x = c(5, 7))
legend_inside <- function() {
theme(legend.position = "inside",
legend.position.inside = c(1, 1),
legend.justification = c(1.05, 1.1),
legend.title = element_text(size = rel(0.7)),
legend.text = element_text(size = rel(0.6)),
legend.key.size = unit(0.3, "cm"))
}
p
p + legend_inside()
p + legend_inside()
p <-
iris %>%
ggplot(aes(x = Sepal.Length, y = Sepal.Width, shape = Species, col = Species)) +
geom_point(size = 2) +
labs(title = "The famous iris data",
subtitle = "Have you ever seen it?") +
scale_color_manual(values = colors[c(8, 3, 10)]) +
my_theme() +
add_grid() +
expand_limits(x = c(5, 7))
p <-
iris %>%
ggplot(aes(x = Sepal.Length, y = Sepal.Width, shape = Species, col = Species)) +
geom_point(size = 2) +
labs(title = "The famous iris data",
subtitle = "Have you ever seen it?") +
scale_color_manual(values = colors[c(8, 3, 10)]) +
my_theme() +
add_grid()
legend_inside <- function() {
theme(legend.position = "inside",
legend.position.inside = c(1, 1),
legend.justification = c(1.05, 1.1),
legend.title = element_text(size = rel(0.7)),
legend.text = element_text(size = rel(0.6)),
legend.key.size = unit(0.3, "cm"))
}
p + legend_inside()
?legend.key
?theme
legend_inside <- function(position = c(1, 1), justification = c(1.1, 1.1),
scale_title = 1, scale_text = 1, scale_key = 1, ...) {
theme(legend.position = "inside",
legend.position.inside = position,
legend.justification = justification,
legend.title = element_text(size = rel(scale_title)),
legend.text = element_text(size = rel(scale_text)),
legend.key.size = unit(scale_key),
...,
complete = FALSE)
}
p + legend_inside()
legend_inside <- function(position = c(1, 1), justification = c(1.1, 1.1),
scale_title = 1, scale_text = 1, scale_key = 1, ...) {
theme(legend.position = "inside",
legend.position.inside = position,
legend.justification = justification,
legend.title = element_text(size = rel(scale_title)),
legend.text = element_text(size = rel(scale_text)),
legend.key.size = unit(scale_key, "pt"),
...,
complete = FALSE)
}
p + legend_inside()
?unit
devtools::load_all()
devtools::document()
devtools::load_all()
rm(list = ls())
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
Heimisc::update_cran(".")
?Heimisc::reinstall
library(Heimisc)
?Heimisc::reinstall
Heimisc::reinstall
Heimisc::uninstall
Heimisc::uninstall("Heimisc")
Heimisc::install("Heimisc")
install.packages(pkg, repos = get_cran(), ...)
usethis::edit_r_profile()
devtools::install_github("dheimgartner/Heimisc")
Heimisc::get_cran()
Heimisc::legend_inside
?Heimisc::legend_inside
